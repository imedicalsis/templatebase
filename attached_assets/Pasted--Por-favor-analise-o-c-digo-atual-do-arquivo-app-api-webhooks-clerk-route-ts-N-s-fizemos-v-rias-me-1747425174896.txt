"Por favor, analise o código atual do arquivo app/api/webhooks/clerk/route.ts. Nós fizemos várias melhorias importantes em relação a uma versão anterior, e quero que você entenda essas mudanças e os motivos por trás delas. As principais alterações foram:

Tipagem Correta dos Headers na Validação:

A função validateRequest agora espera o parâmetro headersList como sendo do tipo Headers (importado de next/headers).
Motivo: Isso se alinha com o que é retornado pela função headers() dos Route Handlers do Next.js App Router.
Consistência com o Schema Prisma para clerkUserID:

O campo no nosso modelo User do Prisma que armazena o ID do Clerk é clerkUserID. Todas as operações do Prisma (create, update, delete) dentro do webhook foram atualizadas para usar clerkUserID nos campos data e where, em vez de clerkId.
Motivo: Garante que o código do webhook corresponda exatamente ao nosso schema de banco de dados definido no Prisma.
Importação e Uso do Enum Role do Prisma:

O enum Role (com valores como ADMIN, ALUNO) agora é importado de @prisma/client.
Motivo: Para garantir a tipagem correta e a integridade dos dados ao definir o papel do usuário no nosso banco de dados.
Leitura do role a partir dos public_metadata do Clerk:

O role do usuário agora é lido de eventData.public_metadata (onde eventData é evt.data).
No evento user.created, o role é convertido para o tipo Role do Prisma, e se nenhum role for encontrado nos public_metadata, o padrão é Role.ALUNO.
No evento user.updated, o role só é atualizado no banco se um valor válido for fornecido nos public_metadata; caso contrário, o role existente não é alterado inadvertidamente.
Motivo: public_metadata é o local apropriado para armazenar informações de role que precisam ser acessadas por diferentes partes da aplicação (como o middleware). O tratamento diferenciado para criação e atualização evita atribuições de papel indesejadas.
Acesso Seguro a email_addresses:

Ao acessar eventData.email_addresses[0].email_address, foi implementado o optional chaining (?.) e um fallback para null (ex: eventData.email_addresses?.[0]?.email_address ?? null).
Motivo: Prevenir erros de runtime caso a lista email_addresses esteja vazia ou o objeto seja nulo.
Melhorias no Logging e Tratamento de Erros:

Adicionamos console.log mais detalhados para rastrear o recebimento de eventos e o resultado das operações de banco de dados.
A função validateRequest agora loga erros específicos de falha na verificação da assinatura.
O bloco catch principal na função POST agora loga error.message e inclui details: error.message na resposta JSON, além de usar códigos de status HTTP mais específicos (401 para falha de assinatura, 500 para outros erros).
Motivo: Facilitar a depuração e o monitoramento do webhook, além de fornecer feedback mais preciso ao Clerk.
Verificação de Existência em user.deleted:

Antes de tentar deletar um usuário no evento user.deleted, o código agora verifica se o usuário existe no banco de dados local. A deleção só ocorre se o usuário for encontrado.
Motivo: Tornar a operação mais robusta e evitar logs de erro desnecessários caso o Clerk envie um evento de deleção para um usuário que, por algum motivo, nunca foi sincronizado ou já foi removido.
Por favor, confirme seu entendimento dessas alterações e como elas tornam o handler do webhook mais robusto, seguro e alinhado com as melhores práticas para integração com Clerk e Prisma no Next.js App Router."